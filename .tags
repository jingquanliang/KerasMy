!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Base	.\mysql\SQLAlChemy.py	/^Base = declarative_base()$/;"	v
Child	.\test\test1.py	/^class Child(Parent): # 定义子类$/;"	c
Column	.\mysql\SQLAlChemy.py	/^from sqlalchemy import Column, String,Integer,create_engine$/;"	i
DBSession	.\mysql\SQLAlChemy.py	/^DBSession = sessionmaker(bind=engine)$/;"	v
Flask	.\myflask\testStatic.py	/^from flask import Flask$/;"	i
Flask	.\myflask\testflask.py	/^from flask import Flask$/;"	i
Integer	.\mysql\SQLAlChemy.py	/^from sqlalchemy import Column, String,Integer,create_engine$/;"	i
MySQLdb	.\mysql\MySqlTest.py	/^import MySQLdb$/;"	i
Parent	.\test\test1.py	/^class Parent:        # 定义父类$/;"	c
People	.\tmp\People.py	/^class People(object):$/;"	c
String	.\mysql\SQLAlChemy.py	/^from sqlalchemy import Column, String,Integer,create_engine$/;"	i
User	.\mysql\SQLAlChemy.py	/^class User(Base):$/;"	c
__author__	.\myflask\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\mysql\MySqlTest.py	/^__author__ = 'jql'$/;"	v
__author__	.\mysql\SQLAlChemy.py	/^__author__ = 'jql'$/;"	v
__author__	.\mysql\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\ss\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\test\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\test\test.py	/^__author__ = 'jql'$/;"	v
__author__	.\test\testMain.py	/^__author__ = 'jql'$/;"	v
__author__	.\tmp\MultiThread.py	/^__author__ = 'jql'$/;"	v
__author__	.\tmp\MultiThreadAsy.py	/^__author__ = 'jql'$/;"	v
__author__	.\tmp\People.py	/^__author__ = 'jql'$/;"	v
__author__	.\tmp\QueueTest.py	/^__author__ = 'jql'$/;"	v
__author__	.\tmp\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\webCrawler\__init__.py	/^__author__ = 'jql'$/;"	v
__author__	.\webCrawler\getJpg.py	/^__author__ = 'jql'$/;"	v
__init__	.\test\test1.py	/^   def __init__(self):$/;"	m	class:Child
__init__	.\test\test1.py	/^   def __init__(self):$/;"	m	class:Parent
__init__	.\tmp\MultiThread.py	/^    def __init__(self, threadID, name, counter):$/;"	m	class:myThread
__init__	.\tmp\MultiThreadAsy.py	/^    def __init__(self, threadID, name, counter):$/;"	m	class:myThread
__init__	.\tmp\People.py	/^    def __init__(self,name):$/;"	m	class:People
__init__	.\tmp\QueueTest.py	/^    def __init__(self, threadID, name, q):$/;"	m	class:myThread
__tablename__	.\mysql\SQLAlChemy.py	/^    __tablename__ = 'user'$/;"	v	class:User
app	.\myflask\testStatic.py	/^app = Flask(__name__,static_folder='assets',static_url_path='\/mylib')$/;"	v
app	.\myflask\testflask.py	/^app = Flask(__name__)$/;"	v
book	.\myflask\testflask.py	/^def book():$/;"	f
c	.\test\test1.py	/^c = Child()          # 实例化子类$/;"	v
childMethod	.\test\test1.py	/^   def childMethod(self):$/;"	m	class:Child
conn	.\mysql\MySqlTest.py	/^    conn=MySQLdb.connect(host='127.0.0.1',user='root',passwd='123456',db='own',port=3306)$/;"	v
count	.\mysql\MySqlTest.py	/^    count=cur.execute("select * from user")$/;"	v
create_engine	.\mysql\SQLAlChemy.py	/^from sqlalchemy import Column, String,Integer,create_engine$/;"	i
cur	.\mysql\MySqlTest.py	/^    cur=conn.cursor()$/;"	v
declarative_base	.\mysql\SQLAlChemy.py	/^from sqlalchemy.ext.declarative import declarative_base$/;"	i
engine	.\mysql\SQLAlChemy.py	/^engine = create_engine('mysql+mysqldb:\/\/root:123456@127.0.0.1:3306\/own')$/;"	v
exitFlag	.\tmp\MultiThread.py	/^exitFlag = 0$/;"	v
exitFlag	.\tmp\QueueTest.py	/^exitFlag = 0$/;"	v
exitFlag	.\tmp\QueueTest.py	/^exitFlag = 1$/;"	v
getAttr	.\test\test1.py	/^   def getAttr(self):$/;"	m	class:Parent
getHtml	.\webCrawler\getJpg.py	/^def getHtml(url):$/;"	f
getImg	.\webCrawler\getJpg.py	/^def getImg(html):$/;"	f
html	.\webCrawler\getJpg.py	/^html = getHtml(urlString2)$/;"	v
index	.\myflask\testflask.py	/^def index():$/;"	f
init_static_folder	.\myflask\testStatic.py	/^def init_static_folder(app):$/;"	f
main1	.\test\test.py	/^def main1():$/;"	f
movie	.\myflask\testflask.py	/^def movie():$/;"	f
music	.\myflask\testflask.py	/^def music():$/;"	f
myTest	.\tmp\MultiThread.py	/^    def myTest(self):$/;"	m	class:myThread
myThread	.\tmp\MultiThread.py	/^class myThread (threading.Thread):   #继承父类threading.Thread$/;"	c
myThread	.\tmp\MultiThreadAsy.py	/^class myThread (threading.Thread):$/;"	c
myThread	.\tmp\QueueTest.py	/^class myThread (threading.Thread):$/;"	c
nameList	.\tmp\QueueTest.py	/^nameList = ["One", "Two", "Three", "Four", "Five"]$/;"	v
number	.\webCrawler\getJpg.py	/^number = 10  # 图片收集数量$/;"	v
os	.\myflask\testStatic.py	/^    import os$/;"	i
os	.\test\test.py	/^import os,sys$/;"	i
os	.\webCrawler\getJpg.py	/^import os$/;"	i
parentAttr	.\test\test1.py	/^   parentAttr = 100$/;"	v	class:Parent
parentMethod	.\test\test1.py	/^   def parentMethod(self):$/;"	m	class:Parent
path	.\webCrawler\getJpg.py	/^path = 'img\/'  # 图片存放目录$/;"	v
printInfo	.\tmp\People.py	/^    def printInfo(self):$/;"	m	class:People
print_time	.\tmp\MultiThread.py	/^def print_time(threadName, delay, counter):$/;"	f
print_time	.\tmp\MultiThreadAsy.py	/^def print_time(threadName, delay, counter):$/;"	f
process_data	.\tmp\QueueTest.py	/^def process_data(threadName, q):$/;"	f
queue	.\tmp\QueueTest.py	/^import queue$/;"	i
queueLock	.\tmp\QueueTest.py	/^queueLock = threading.Lock()$/;"	v
re	.\webCrawler\getJpg.py	/^import re$/;"	i
request	.\myflask\testflask.py	/^from flask import request$/;"	i
result	.\mysql\MySqlTest.py	/^    result=cur.fetchone()$/;"	v
results	.\mysql\MySqlTest.py	/^    results=cur.fetchmany(5)$/;"	v
run	.\tmp\MultiThread.py	/^    def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数$/;"	m	class:myThread
run	.\tmp\MultiThreadAsy.py	/^    def run(self):$/;"	m	class:myThread
run	.\tmp\QueueTest.py	/^    def run(self):$/;"	m	class:myThread
save_img	.\webCrawler\getJpg.py	/^def save_img(url, path, x):$/;"	f
schedule	.\webCrawler\getJpg.py	/^def schedule(a, b, c):$/;"	f
session	.\mysql\SQLAlChemy.py	/^session = DBSession()$/;"	v
sessionmaker	.\mysql\SQLAlChemy.py	/^from sqlalchemy.orm import sessionmaker$/;"	i
setAttr	.\test\test1.py	/^   def setAttr(self, attr):$/;"	m	class:Parent
sys	.\test\test.py	/^import os,sys$/;"	i
test	.\test\test.py	/^def test():$/;"	f
thread	.\tmp\QueueTest.py	/^    thread = myThread(threadID, tName, workQueue)$/;"	v
thread1	.\tmp\MultiThread.py	/^thread1 = myThread(1, "Thread-1", 1)$/;"	v
thread1	.\tmp\MultiThreadAsy.py	/^thread1 = myThread(1, "Thread-1", 1)$/;"	v
thread2	.\tmp\MultiThread.py	/^thread2 = myThread(2, "Thread-2", 2)$/;"	v
thread2	.\tmp\MultiThreadAsy.py	/^thread2 = myThread(2, "Thread-2", 2)$/;"	v
threadID	.\tmp\QueueTest.py	/^threadID = 1$/;"	v
threadList	.\tmp\QueueTest.py	/^threadList = ["Thread-1", "Thread-2", "Thread-3"]$/;"	v
threadLock	.\tmp\MultiThreadAsy.py	/^threadLock = threading.Lock()$/;"	v
threading	.\tmp\MultiThread.py	/^import threading$/;"	i
threading	.\tmp\MultiThreadAsy.py	/^import threading$/;"	i
threading	.\tmp\QueueTest.py	/^import threading$/;"	i
threads	.\tmp\MultiThreadAsy.py	/^threads = []$/;"	v
threads	.\tmp\QueueTest.py	/^threads = []$/;"	v
time	.\tmp\MultiThread.py	/^import time$/;"	i
time	.\tmp\MultiThreadAsy.py	/^import time$/;"	i
time	.\tmp\QueueTest.py	/^import time$/;"	i
urlString	.\webCrawler\getJpg.py	/^urlString = "http:\/\/tieba.baidu.com\/p\/2460150866"$/;"	v
urlString1	.\webCrawler\getJpg.py	/^urlString1 = "http:\/\/image.baidu.com\/"$/;"	v
urlString2	.\webCrawler\getJpg.py	/^urlString2 = "http:\/\/desk.zol.com.cn\/meinv\/"$/;"	v
urllib	.\webCrawler\getJpg.py	/^import urllib$/;"	i
user	.\mysql\SQLAlChemy.py	/^user = session.query(User).filter(User.userid=='5').one()$/;"	v
userid	.\mysql\SQLAlChemy.py	/^    userid = Column(Integer,primary_key=True)$/;"	v	class:User
username	.\mysql\SQLAlChemy.py	/^    username = Column(String(20))$/;"	v	class:User
v_auth	.\myflask\testflask.py	/^def v_auth():$/;"	f
v_index	.\myflask\testStatic.py	/^def v_index():$/;"	f
workQueue	.\tmp\QueueTest.py	/^workQueue = queue.Queue(10)$/;"	v
